package com.bytecoders.order.dao;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;

import com.bytecoders.client.Clients;
import com.bytecoders.employee.Employee;
import com.bytecoders.order.Order;
import com.bytecoders.stock.dao.StockDao;
import com.bytecoders.stock.dao.StockDaoImpl;


public class OrdersDaoImpl implements OrdersDao {
	public Connection conn = null;

	// Sets the connection on object construction
	public OrdersDaoImpl(Connection connection) {
		this.conn = connection;
	}

	@Override
	//Insert and order into the Database
	public boolean insertOrder(Order order) {
		PreparedStatement ps = null;
		ResultSet rs = null;
		String query = "INSERT INTO ORDERS (ORDERDATE, TOTALPRICE, EMPLOYEEBW_IDEMPLOYEE, CLIENTS_CLIENT_ID) VALUES (?, ?, ?, ?)";
		try {
			//Gets the key generated by the database
			String[] key = { "ORDER_ID" };			
			ps = conn.prepareStatement(query, key);
			
			//Converts the date for and SQL format
			java.sql.Date sqlDate = new java.sql.Date(new java.util.Date().getTime());
			ps.setDate(1, sqlDate);
			ps.setDouble(2, order.getTotalPrice());
			ps.setInt(3, order.getEmployee().getIdEmployee());
			ps.setInt(4, Integer.parseInt(order.getClient().getClientID()));
			
			ps.executeUpdate();
			
			//Obtains the generated Key
			rs = ps.getGeneratedKeys();
			//Sets the key to the Batch ID
			if (rs.next()) {
				int orderID = rs.getInt(1);
				order.setID(orderID);
			}
			
			//Now it will use save all the batches associated with this order
			OrderBatchesDao orderBatchesDao = new OrderBatchesDaoImpl(conn);			
			orderBatchesDao.insertOrder(order);
			
			return true;
		} catch (SQLException e) {
			System.out.println(e.getMessage());
		} finally {
			try {
				// Closes the statement to keep memory clean
				ps.close();
			} catch (SQLException e) {
				System.out.println(e.getMessage());
			}
		}
		return false;
	}


	@Override
	//Select all the orders on the Database
	public List<Order> selectAllOrders() {
		List<Order> ordersList = new ArrayList<Order>();
		String query = "SELECT ORDER_ID, TOTALPRICE, ORDERDATE, EMPLOYEEBW_IDEMPLOYEE, CLIENTS_CLIENT_ID FROM ORDERS ORDER BY ORDER_ID";
		try {
			PreparedStatement ps = conn.prepareStatement(query);
			ResultSet rs = ps.executeQuery();
			//loops while there are more rows to read and put them into the return list
			while (rs.next() == true) {
				Order order = new Order();
				order.setID(rs.getInt("ORDER_ID"));
				order.setOrderDate(rs.getDate("ORDERDATE").toLocalDate());
				order.setTotalPrice(rs.getDouble("TOTALPRICE"));

				ordersList.add(order);
			}
		} catch (SQLException e) {
			System.out.println(e.getMessage());
		}
		return ordersList;
	}

	//Select a given order and return it`s data
	public Order selectOrder(Order targetOrder) {
		String query = "SELECT ORDER_ID, ORDERDATE, IDEMPLOYEE, CLIENT_ID FROM ORDERS WHERE ORDER_ID = ? ORDER BY ORDER_ID";
		Order selectedOrder = null;
		try {
			PreparedStatement ps = conn.prepareStatement(query);
			ps.setInt(1, targetOrder.getID());
			ResultSet rs = ps.executeQuery();
			if (rs.next() == true) {
				selectedOrder = new Order();
				selectedOrder.setID(rs.getInt("ORDER_ID"));
				selectedOrder.setOrderDate(rs.getDate("ORDERDATE").toLocalDate());
				selectedOrder.setEmployee(this.selectEmployee(rs.getInt("IDEMPLOYEE")));
				selectedOrder.setClient(this.selectClient(rs.getInt("CLIENT_ID")));

			}
		} catch (SQLException e) {
			System.out.println(e.getMessage());
		}
		return selectedOrder;
	}

	//Select An Employee data -- This was created here because there was no method that returned that on the Employee class
	private Employee selectEmployee(int EmployeeID) {

		PreparedStatement ps = null;
		ResultSet rs = null;

		String query = "SELECT IDEMPLOYEE, ADDRESS, AGE, SALARY, NAME FROM EMPLOYEEBW where IDEMPLOYEE = ?";
		Employee selectedEmployee = null;

		try {
			ps = conn.prepareStatement(query);
			ps.setInt(1, EmployeeID);

			rs = ps.executeQuery();
			if (rs.next() == true) {
				selectedEmployee = new Employee();
				selectedEmployee.setIdEmployee(rs.getInt("idEmployee"));
				selectedEmployee.setFirstName(rs.getString("firstName"));
				selectedEmployee.setLastName(rs.getString("lastName"));
				selectedEmployee.setEmail(rs.getString("email"));
			}
		} catch (SQLException e) {
			System.out.println(e.getMessage());
		} finally {
			try {
				// Closes the statement to keep memory clean
				ps.close();
				rs.close();
			} catch (SQLException e) {
				System.out.println(e.getMessage());
			}
		}
		return selectedEmployee;

	}

	//Select a client data -- This was created here because there was no method that returned that on the Client class
	private Clients selectClient(int ClientID) {

		PreparedStatement ps = null;
		ResultSet rs = null;

		String query = "select CLIENT_ID, NAME, ADDRESS, PHONE_NUMBER from clients where CLIENT_ID = ?";
		Clients selectedClient = null;

		try {
			ps = conn.prepareStatement(query);
			ps.setInt(1, ClientID);

			rs = ps.executeQuery();
			if (rs.next() == true) {
				selectedClient = new Clients();
				selectedClient.setClientID(rs.getString("CLIENT_ID"));
				selectedClient.setName(rs.getString("NAME"));
				selectedClient.setAddress(rs.getString("ADDRESS"));
			}
		} catch (SQLException e) {
			System.out.println(e.getMessage());
		} finally {
			try {
				// Closes the statement to keep memory clean
				ps.close();
				rs.close();
			} catch (SQLException e) {
				System.out.println(e.getMessage());
			}
		}
		return selectedClient;

	}

	@Override
	//Select all the clients from the database - This was created here because there was no method that returned that on the Client class
	public List<Clients> selectAllClients() {
		PreparedStatement ps = null;
		ResultSet rs = null;

		List<Clients> clientsList = new ArrayList<Clients>();
		String query = "select CLIENT_ID, NAME, ADDRESS, PHONE_NUMBER from clients";
		Clients selectedClient = null;

		try {
			ps = conn.prepareStatement(query);
			rs = ps.executeQuery();
			while (rs.next() == true) {
				selectedClient = new Clients();
				selectedClient.setClientID(rs.getString("CLIENT_ID"));
				selectedClient.setName(rs.getString("NAME"));
				selectedClient.setAddress(rs.getString("ADDRESS"));
				clientsList.add(selectedClient);
			}
		} catch (SQLException e) {
			System.out.println(e.getMessage());
		} finally {
			try {
				// Closes the statement to keep memory clean
				rs.close();
			} catch (SQLException e) {
				System.out.println(e.getMessage());
			}
		}
		return clientsList;
	}


	@Override
	//Select all the Employee from the database - This was created here because there was no method that returned that on the Employee class
	public List<Employee> selectAllEmployees() {
		PreparedStatement ps = null;
		ResultSet rs = null;

		List<Employee> employeeList = new ArrayList<Employee>();
		String query = "SELECT IDEMPLOYEE, FIRSTNAME, LASTNAME FROM EMPLOYEEBW";
		Employee selectedEmployee = null;

		try {
			ps = conn.prepareStatement(query);
			rs = ps.executeQuery();
			while (rs.next() == true) {
				selectedEmployee = new Employee();
				selectedEmployee.setIdEmployee(rs.getInt("idEmployee"));
				selectedEmployee.setFirstName(rs.getString("firstName"));
				selectedEmployee.setLastName(rs.getString("LASTNAME"));
				employeeList.add(selectedEmployee);
			}
		} catch (SQLException e) {
			System.out.println(e.getMessage());
		} finally {
			try {
				// Closes the statement to keep memory clean
				rs.close();
			} catch (SQLException e) {
				System.out.println(e.getMessage());
			}
		}
		return employeeList;
	}

}
